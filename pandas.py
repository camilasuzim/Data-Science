# -*- coding: utf-8 -*-
"""Pandas.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GazPiM-QQWSuFy0dlzOC3HuZFXCy3hpN
"""

#Importanto a biblioteca pandas
import pandas as pd

#Leitura do arquivo
df = pd.read_csv("/content/drive/MyDrive/Cusro_Python_Pandas_Digital_Innovation-master/datasets/Gapminder.csv", error_bad_lines=False, sep=";")

#Exibindo as 5 primeiras linhas
df.head()

#Renoameando as colunas da base de dados para melhor entendimento
df = df.rename(columns={"country":"Pais", "continent":"Continente", "year":"Ano", "lifeExp": "Expectativa de vida", "pop":"Pop Total", "gdpPercap":"PIB"})

df.head()

#Verificando o total de linhas e colunas da base de dados 
df.shape

#Retornando quais são as colunas da base de dados
df.columns

#Identificando o tipo de dado de cada coluna
df.dtypes

#Exibindo as 5 últimas linhas 
df.tail()

#Retornando informações estatísticas do conjunto de dados
df.describe()

#Retornando quais são os continentes da base
df["Continente"].unique()

#Retornando as 5 primeiras linhas da Oceania
Oceania = df.loc[df["Continente"] == "Oceania"]
Oceania.head()

#Filtrando somente a Oceania
Oceania["Continente"].unique()

#Agrupando + contando a quantidade de países para cada continente 
df.groupby("Continente")["Pais"].nunique()

#Fazendo a média anual da expectativa de vida de cada país
df.groupby("Ano")["Expectativa de vida"].mean()

#Fazendo a média do PIB
df["PIB"].mean()

#Fazendo a soma do PIB
df["PIB"].sum()

# Importanda a biblioteca Pandas
import pandas as pd

#Leitura de arquivos
df1 = pd.read_excel("Aracaju.xlsx")
df2 = pd.read_excel("Fortaleza.xlsx")
df3 = pd.read_excel("Natal.xlsx")
df4 = pd.read_excel("Recife.xlsx")
df5 = pd.read_excel("Salvador.xlsx")

#Juntando os arquivos
df = pd.concat([df1,df2,df3,df4,df5])

#Exibindo as 5 primeiras linhas
df.head()

#Exibindo as 5 últimas linhas 
df.tail()

#Pegando amostra de dados
df.sample(5)

#Verificando o tipo de dado das colunas
df.dtypes

#Alterando o tipo de dado da coluna LojaID
df["LojaID"] = df["LojaID"].astype("object")

df.dtypes

#Consultando linhas com valores faltantes
df.isnull().sum()

#Substituindo os valores nulos por zero
df["Vendas"].fillna(0, inplace = True)

#Apagando linhas com valores nulos
df.dropna(inplace = True)

#Apagando as linhas com valores nulos com base em apenas 1 coluna
df.dropna(subset = ["Vendas"], inplace = True)

#Apagando as linhas com valores nulos em todas as colunas
df.dropna(how = "all", inplace = True)

#Criando a coluna de receita
df["Receita"] = df["Vendas"].mul(df["Qtde"])

df.head()

#Retornando a maior receita
df["Receita"].max()

#Retornando a menor receita
df["Receita"].min()

#Retornando as 3 maiores receitas
df.nlargest(3, "Receita")

#Retornando as 3 menores receitas
df.nsmallest(3, "Receita")

#Agrupando por a soma da receita por cidade
df.groupby("Cidade")["Receita"].sum()

#Ordenando os conjuntos de dados com base na receita
df.sort_values("Receita", ascending = False).head(10)

#Transformando a coluna de data em tipo inteiro
df["Data"] = df["Data"].astype("int64")

df.dtypes

#Transformando a coluna de data em tipo data
df["Data"] = pd.to_datetime(df["Data"])

df.dtypes

#Agrupando a soma da receita por ano
df.groupby(df["Data"].dt.year)["Receita"].sum()

#Criando uma coluna ano
df["Ano_Venda"] = df["Data"].dt.year

df.sample(5)

#Extraindo o mês e o dia da venda
df["mes_venda"], df["dia_venda"] = (df["Data"].dt.month, df["Data"].dt.day)

df.sample(5)

#Retornando a data mais antiga
df["Data"].min()

#Calculando a diferença de dias
df["diferenca_dias"] = df["Data"] - df["Data"].min()

df.sample(5)

#Criando a coluna de trimestre
df["trimestre_venda"] = df["Data"].dt.quarter

df.sample(5)

#Filtrando as vendas de 2019 do mês de março
vendas_marco_19 = df.loc[(df["Data"].dt.year == 2019) & (df["Data"].dt.month == 3)]

vendas_marco_19

df["LojaID"].value_counts(ascending = False)

#Gráfico de barras
df["LojaID"].value_counts(ascending = False).plot.bar();

#Gráfico de barras horizontais
df["LojaID"].value_counts(ascending = False).plot.barh();

#Gráfico de barras horizontais do maior para o menor
df["LojaID"].value_counts(ascending = True).plot.barh();

#Gráfico de pizza
df.groupby(df["Data"].dt.year)["Receita"].sum().plot.pie();

#Total de vendas por cidade
df["Cidade"].value_counts()

#Adicionando título de alterando nome dos eixos
import matplotlib.pyplot as plt
df["Cidade"].value_counts().plot.bar(title = "Total de vendas por cidade")
plt.xlabel("Cidade")
plt.ylabel("Total de vendas")

#Alterando a cor
df["Cidade"].value_counts().plot.bar(title = "Total de vendas por cidade", color = "purple")
plt.xlabel("Cidade")
plt.ylabel("Total de vendas")

#Alterando o estilo
plt.style.use("ggplot")

df.groupby(df["mes_venda"])["Qtde"].sum().plot(title = "Total de vendas por mês")
plt.xlabel("Mês")
plt.ylabel("Total de produtos vendidos")
plt.legend()

df.groupby(df["mes_venda"])["Qtde"].sum()

#Selecionando apenas as vendas de 2019
df_2019 = df[df["Ano_Venda"] == 2019]

#Total de produtos vendidos por mês
df_2019.groupby(df_2019["mes_venda"])["Qtde"].sum().plot( marker = "v", title = "Total de produtos vendidos por mês em 2019")
plt.xlabel("Mês")
plt.ylabel("Total de Vendas")
plt.legend();

#Histograma
plt.hist(df["Qtde"], color = "darkturquoise");

plt.scatter(x = df_2019["dia_venda"], y = df_2019["Receita"]);

#Salvando os gráficos em png
df_2019.groupby(df_2019["mes_venda"])["Qtde"].sum().plot( marker = "v", title = "Total de produtos vendidos por mês em 2019")
plt.xlabel("Mês")
plt.ylabel("Total de Vendas")
plt.legend()
plt.savefig("grafico qtde x mes de vendas.png")